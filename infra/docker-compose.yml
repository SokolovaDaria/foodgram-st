version: '3.8'

services:
  db:
    image: postgres:13.0-alpine 
    container_name: foodgram_db
    volumes:
      - pg_data:/var/lib/postgresql/data/
    env_file:
      - .env 
    healthcheck: 
        test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
        interval: 5s
        timeout: 5s
        retries: 5

  backend:
    build:
      context: . 
      dockerfile: infra/Dockerfile 
    container_name: foodgram_backend
    restart: always
    volumes:
      - static_value:/app/staticfiles/ 
      - media_value:/app/media/ 
      - ./backend:/app/backend/
    depends_on:
      db:
          condition: service_healthy 
    env_file:
      - .env 
    expose: 
      - "8000"
    command: > 
      sh -c "python backend/manage.py collectstatic --noinput &&
             python backend/manage.py migrate --noinput &&
             python backend/manage.py load_ingredients && # Optional: Load data on startup
             gunicorn foodgram.wsgi:application --bind 0:8000"

  frontend:
    build:
      context: frontend 
      dockerfile: Dockerfile 
    container_name: foodgram_frontend
    volumes:
      - ./frontend/:/app/result_build/ 
      
    command: npm run build 

  nginx:
    image: nginx:1.21.3-alpine 
    container_name: foodgram_nginx
    restart: always
    ports:
      - "80:80" 
    volumes:
      - ./infra/nginx.conf:/etc/nginx/conf.d/default.conf 
     
      - static_value:/var/html/static/ 
      - media_value:/var/html/media/ 
      
      - ./frontend/build:/usr/share/nginx/html/ 
      
    depends_on:
      - backend
      

volumes:
  pg_data:
  static_value:
  media_value:
  